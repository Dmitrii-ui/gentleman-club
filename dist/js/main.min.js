"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

;

(function () {
  var burger = document.querySelector('.burger');
  var menu = document.querySelector('.menu-header');
  burger.addEventListener('click', function (evt) {
    if (burger.classList.contains('active')) {
      document.body.classList.remove('lock');
      menu.classList.remove('active');
      burger.classList.remove('active');
    } else {
      document.body.classList.add('lock');
      menu.classList.add('active');
      burger.classList.add('active');
    }
  });
})();

;

(function () {
  var dynamicImages = document.querySelectorAll('.dynamic__img');

  var _iterator = _createForOfIteratorHelper(dynamicImages),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var i = _step.value;
      var srcW = i.getAttribute('data-source-webp');
      var srcN = i.getAttribute('data-source');
      var width = i.getAttribute('width');
      var height = i.getAttribute('height');
      var imgClass = i.getAttribute('data-class');
      var img = "\n\t\t<picture>\n\t\t\t<img width=\"".concat(width, "\" height=\"").concat(height, "\" alt=\"\" class=\"").concat(imgClass, "\" src=\"/img/").concat(srcN, "\">\n\t\t</picture>\n\t\t");
      i.parentNode.insertAdjacentHTML('afterbegin', img);
      i.remove();
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
})();

function slider(selector, sliderButtonsParams, sliderActionsParams) {
  var elements = document.querySelectorAll(selector);
  var sliderButtons = document.querySelector(sliderButtonsParams);
  var sliderActions = document.querySelector(sliderActionsParams);
  var counter = 0;
  sliderButtons.addEventListener('click', function (evt) {
    if (evt.target.classList.contains('slider__btn')) {
      if (evt.target.classList.contains('active')) {
        return;
      } else {
        var index = Array.from(document.querySelectorAll('.slider__btn')).indexOf(evt.target);
        document.querySelectorAll('.slider__btn').forEach(function (el) {
          el.classList.remove('active');
        });
        evt.target.classList.add('active');
        counter = index;
      }

      changeItem(counter, elements);
    }
  });
  sliderActions.addEventListener('click', function (evt) {
    if (evt.target.classList.contains('slider__action')) {
      if (evt.target.classList.contains('one')) {
        counter--;

        if (counter < 0) {
          counter = 5;
        }

        var elem = document.querySelectorAll('.slider__btn')[counter];

        if (elem.classList.contains('active')) {
          false;
        } else {
          document.querySelectorAll('.slider__btn').forEach(function (el) {
            el.classList.remove('active');
          });
          elem.classList.add('active');
        }
      } else if (evt.target.classList.contains('two')) {
        counter++;

        if (counter > 5) {
          counter = 0;
        }

        var _elem = document.querySelectorAll('.slider__btn')[counter];

        if (_elem.classList.contains('active')) {
          false;
        } else {
          document.querySelectorAll('.slider__btn').forEach(function (el) {
            el.classList.remove('active');
          });

          _elem.classList.add('active');
        }
      }

      changeItem(counter, elements);
    }
  });
}

slider('.slider__item', '.slider__buttons', '.slider__actions');
slider('.images__item', '.images__buttons', '.images__actions');

function changeItem(counter, elements) {
  var _iterator2 = _createForOfIteratorHelper(elements),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var item = _step2.value;
      item.classList.remove('active');
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  elements[counter].classList.add('active');
}